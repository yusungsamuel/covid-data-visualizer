{"version":3,"sources":["component/navbar/index.js","utilities/API/index.js","utilities/function/index.js","component/forms/index.js","component/racingBar/index.js","component/pieChart/index.js","component/lineChart/index.js","component/dataDisplay/index.js","component/legend/index.js","component/choropleth/index.js","component/currentData/index.jsx","App.js","index.js"],"names":["NavBar","props","Paper","square","style","Tabs","centered","options","map","option","i","Tab","onClick","click","key","label","covidData","singleState","state","url","axios","allStateCurrent","usCurrent","parseDate","str","toString","split","splice","join","DropDown","FormControl","color","Select","value","onChange","submit","children","RacingBar","racingBarRef","useRef","names","Set","states","s","abbreviation","fetchData","a","promise","forEach","push","Promise","all","response","data","r","d","date","obj","name","d3","rank","bars","labels","textTween","axis","ticker","play","svg","duration","keyframes","keyframe","transition","ease","x","domain","updateAxis","updateBars","updateLabels","updateTicker","end","scale","some","undefined","category","categoryByName","Map","Array","from","values","get","now","append","barSize","attr","width","margin","top","n","text","formatDate","then","g","ticks","tickSizeOuter","tickSizeInner","y","padding","_","call","select","remove","selectAll","b","t","this","textContent","formatNumber","slice","enter","prev","bandwidth","update","exit","next","tween","bar","toUpperCase","sort","length","Math","min","datevalues","d3Arr","Date","ka","kb","nameframes","flatMap","height","right","bottom","left","rangeRound","current","useEffect","sketch","className","ref","PieChart","LineChart","useState","setState","histoRef","Object","assign","positiveIncrease","nice","range","yAxis","clone","xAxis","line","defined","isNaN","datum","event","preventDefault","choice","target","MenuItem","DataTable","TableContainer","component","Table","TableHead","TableRow","headers","header","TableCell","TableBody","keys","rows","row","positive","hospitalized","death","DataCell","numberWithCommas","replace","increased","title","legend","tickSize","marginTop","marginRight","marginBottom","marginLeft","tickFormat","tickValues","ramp","canvas","HTMLCanvasElement","context","getContext","fillStyle","fillRect","tickAdjust","interpolate","copy","toDataURL","interpolator","round","invertExtent","thresholds","quantiles","toPrecision","thresholdFormat","max","node","possibleChoice","Choropleth","choroRef","setChoice","setViewingState","handleClick","temp","stateConversion","ceil","hospitalizedCurrently","set","format","path","topojson","us","objects","features","properties","on","number","c","CurrentData","totalCase","setTotalCase","totalDeath","setTotalDeath","viewingState","statesData","setStatesData","usData","deathIncrease","stateData","allStateData","App","activeIndex","setActiveIndex","index","console","log","conditionalRender","AppBar","position","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f0e0ee7c.chunk.js","sourcesContent":["import React from \"react\";\nimport Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport \"./style.scss\"\n\nexport const NavBar = (props) => {\n\n    return (\n        <Paper\n            square={true}\n            style={{\"background-color\": \"#219653\"}}\n        >\n            <Tabs\n                centered\n            >\n                {props.options.map((option, i)=>{\n                    return (\n                        <Tab \n                            onClick={()=>{props.click(i)}}\n                            key={option}\n                            label={option}\n                        />\n                    )\n                })}\n            </Tabs>\n        </Paper>\n\n    )\n};\n\nexport const NavItem = (props) => {\n    return (\n        <li className={props.className}><a className=\"uk-link-reset\" href=\"#\" data-Index={props.dataIndex} onClick={props.handleClick}>{props.title}</a></li>\n    )\n}","import axios from \"axios\";\n\nconst covidData = {\n    singleState: (state) =>{\n        let url = `https://api.covidtracking.com/api/v1/states/${state}/daily.json`;\n        return axios({\n            \"method\": \"GET\",\n            \"url\": url\n        })\n\n    },\n    allStateCurrent: ()=>{\n        let url = \"https://api.covidtracking.com/api/v1/states/current.json\";\n        return axios({\n            \"method\": \"GET\",\n            \"url\": url\n        })\n    },\n    usCurrent: ()=>{\n        let url = \" https://api.covidtracking.com/v1/us/current.json\";\n        return axios({\n            \"method\": \"GET\",\n            \"url\": url\n        })\n    },\n};\n\nexport default covidData;\n","export const parseDate = (str) => {\n    str = str.toString()\n    str = str.split(\"\");\n    str.splice(4, 0, \"-\");\n    str.splice(7, 0, \"-\");\n    str = (str.join(\"\"));\n\n    return str\n}\n","import React from \"react\";\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport \"./style.scss\"\n\nexport function DropDown(props) {\n    return (\n        <FormControl\n            color=\"primary\"\n        >\n            <Select\n                value={props.value}\n                onChange={props.submit}\n            >\n                {props.children}\n            </Select>\n        </FormControl>\n    )\n\n}\n","import React, { useEffect, useRef } from \"react\";\nimport covidData from \"../../utilities/API\";\nimport * as d3 from \"d3\";\nimport * as d3Arr from \"d3-array\";\nimport { parseDate } from \"../../utilities/function\"\nimport states from \"../../states.json\"\nimport { DropDown, Option } from \"../forms\"\nimport \"./style.scss\"\nconst RacingBar = () => {\n    const racingBarRef = useRef(null);\n\n    const names = new Set(states.map(s => s.abbreviation))\n\n    async function fetchData(option) {\n\n        let promise = []\n\n        states.forEach((s) => {\n            if(s !== \"ny\"){\n            promise.push(covidData.singleState(s.abbreviation))\n\n            } \n        })\n\n        let response = await Promise.all(promise)\n\n        let data = [];\n        response.forEach((r) => {\n            r.data.forEach((d) => {\n                if (d.date > 20200228 && d[\"positive\"]) {\n                    let obj = {}\n                    obj.date = parseDate(d.date);\n                    obj.name = d.state;\n                    obj.value = d[\"positive\"].toString()\n                    data.push(d3.autoType(obj))\n                }\n\n            })\n        })\n        return data\n    }\n\n    async function sketch() {\n        let data = await fetchData(\"positive\");\n        const datevalues = Array.from(d3Arr.rollup(data, ([d]) => d.value, d => +d.date, d => d.name))\n            .map(([date, data]) => [new Date(date), data])\n            .sort(([a], [b]) => d3.ascending(a, b))\n\n\n        let n = 12, k = 10;\n        function rank(value) {\n            const data = Array.from(names, name => ({ name, value: value(name.toUpperCase()) }));\n            data.sort((a, b) => d3.descending(a.value, b.value));\n            for (let i = 0; i < data.length; ++i) data[i].rank = Math.min(n, i);\n            return data;\n        }\n\n        //Keyframe to be modularize later\n        const keyframes = [];\n        let ka, a, kb, b;\n        for ([[ka, a], [kb, b]] of d3.pairs(datevalues)) {\n            for (let i = 0; i < k; ++i) {\n                const t = i / k;\n                keyframes.push([\n                    new Date(ka * (1 - t) + kb * t),\n                    rank(name => (a.get(name) || 0) * (1 - t) + (b.get(name) || 0) * t)\n                ]);\n            }\n        }\n        keyframes.push([new Date(kb), rank(name => b.get(name) || 0)]);\n\n\n        const nameframes = d3Arr.groups(keyframes.flatMap(([, data]) => data), d => d.name);\n        const prev = new Map(nameframes.flatMap(([, data]) => d3.pairs(data, (a, b) => [b, a])));\n        const next = new Map(nameframes.flatMap(([, data]) => d3.pairs(data)));\n\n        function bars(svg) {\n            let bar = svg.append(\"g\")\n                .attr(\"fill-opacity\", 0.6)\n                .selectAll(\"rect\");\n            return ([date, data], transition) => bar = bar\n                .data(data.slice(0, n), d => d.name)\n                .join(\n                    enter => enter.append(\"rect\")\n                        .attr(\"fill\", color())\n                        .attr(\"height\", y.bandwidth())\n                        .attr(\"x\", x(0))\n                        .attr(\"y\", d => y((prev.get(d) || d).rank))\n                        .attr(\"width\", d => x((prev.get(d) || d).value) - x(0)),\n                    update => update,\n                    exit => exit.transition(transition).remove()\n                        .attr(\"y\", d => y((next.get(d) || d).rank))\n                        .attr(\"width\", d => x((next.get(d) || d).value) - x(0))\n                )\n                .call(bar => bar.transition(transition)\n                    .attr(\"y\", d => y(d.rank))\n                    .attr(\"width\", d => x(d.value) - x(0)));\n        }\n\n\n        function labels(svg) {\n            let label = svg.append(\"g\")\n                .style(\"font\", \"bold 12px var(--sans-serif)\")\n                .style(\"font-variant-numeric\", \"tabular-nums\")\n                .style(\"text-transform\", \"uppercase\")\n                .attr(\"text-anchor\", \"end\")\n                .selectAll(\"text\");\n\n            return ([date, data], transition) => label = label\n                .data(data.slice(0, n), d => d.name)\n                .join(\n                    enter => enter.append(\"text\")\n                        .attr(\"transform\", d => `translate(${x((prev.get(d) || d).value)},${y((prev.get(d) || d).rank)})`)\n                        .attr(\"y\", y.bandwidth() / 2)\n                        .attr(\"x\", -6)\n                        .attr(\"dy\", \"-0.25em\")\n                        .text(d => d.name)\n                        .call(text => text.append(\"tspan\")\n                            .attr(\"fill-opacity\", 0.7)\n                            .attr(\"font-weight\", \"normal\")\n                            .attr(\"x\", -6)\n                            .attr(\"dy\", \"1.15em\")),\n                    update => update,\n                    exit => exit.transition(transition).remove()\n                        .attr(\"transform\", d => `translate(${x((next.get(d) || d).value)},${y((next.get(d) || d).rank)})`)\n                        .call(g => g.select(\"tspan\").tween(\"text\", d => textTween(d.value, (next.get(d) || d).value)))\n                )\n                .call(bar => bar.transition(transition)\n                    .attr(\"transform\", d => `translate(${x(d.value)},${y(d.rank)})`)\n                    .call(g => g.select(\"tspan\").tween(\"text\", d => textTween((prev.get(d) || d).value, d.value))));\n        }\n\n        const formatNumber = d3.format(\",d\");\n\n        function textTween(a, b) {\n            const i = d3.interpolateNumber(a, b);\n            return function (t) {\n                this.textContent = formatNumber(i(t));\n            };\n        }\n\n\n\n        const margin = ({ top: 16, right: 6, bottom: 6, left: 0 })\n        const barSize = 48;\n        const height = margin.top + barSize * n + margin.bottom;\n        const width = 2.5 * (height)\n\n        const x = d3.scaleLinear([0, 1], [margin.left, width - margin.right])\n        const y = d3.scaleBand()\n            .domain(d3.range(n + 1))\n            .rangeRound([margin.top, margin.top + barSize * (n + 1 + 0.1)])\n            .padding(0.1)\n\n\n        function axis(svg) {\n            const g = svg.append(\"g\")\n                .attr(\"transform\", `translate(0,${margin.top})`);\n\n            const axis = d3.axisTop(x)\n                .ticks(width / 160)\n                .tickSizeOuter(0)\n                .tickSizeInner(-barSize * (n + y.padding()));\n\n            return (_, transition) => {\n                g.transition(transition).call(axis);\n                g.select(\".tick:first-of-type text\").remove();\n                g.selectAll(\".tick:not(:first-of-type) line\").attr(\"stroke\", \"white\");\n                g.select(\".domain\").remove();\n            };\n        }\n\n        const formatDate = d3.utcFormat(\"%Y-%m-%d\")\n\n        function ticker(svg) {\n            const now = svg.append(\"text\")\n                .style(\"font\", `bold ${barSize}px var(--sans-serif)`)\n                .style(\"font-variant-numeric\", \"tabular-nums\")\n                .attr(\"text-anchor\", \"end\")\n                .attr(\"x\", width - 6)\n                .attr(\"y\", margin.top + barSize * (n - 0.45))\n                .attr(\"dy\", \"0.32em\")\n                .text(formatDate(keyframes[0][0]));\n\n            return ([date], transition) => {\n                transition.end().then(() => now.text(formatDate(date)));\n            };\n        }\n\n\n        //color code block\n\n        function color() {\n            const scale = d3.scaleOrdinal(d3.schemeTableau10);\n            if (data.some(d => d.category !== undefined)) {\n                const categoryByName = new Map(data.map(d => [d.name, d.category]))\n                scale.domain(Array.from(categoryByName.values()));\n                return d => scale(categoryByName.get(d.name));\n            }\n            return d => scale(d.name);\n        }\n        const svg = d3.select(racingBarRef.current)\n            .attr(\"viewBox\", [0, 0, width, height]);\n\n        svg.selectAll(\"*\").remove();\n\n        const updateBars = bars(svg);\n        const updateAxis = axis(svg);\n        const updateLabels = labels(svg);\n        const updateTicker = ticker(svg);\n\n\n        async function play(svg) {\n            const duration = 50\n\n            for (const keyframe of keyframes) {\n                const transition = svg.transition()\n                    .duration(duration)\n                    .ease(d3.easeLinear);\n\n                // Extract the top bar’s value.\n                x.domain([0, keyframe[1][0].value]);\n                updateAxis(keyframe, transition);\n                updateBars(keyframe, transition);\n                updateLabels(keyframe, transition);\n                updateTicker(keyframe, transition);\n                await transition.end();\n            }\n        }\n\n        play(svg);\n    }\n\n    useEffect(() => {\n        sketch();\n    }, [])\n\n    return (\n        <div className=\"chart-container\">\n            <h1>Numbers of Positive Cases by states</h1>\n            <svg className = \"canvas\" ref={racingBarRef}></svg>\n        </div>\n    )\n}\n\nexport default RacingBar;","import React, { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport covidData from \"../../utilities/API\";\n\n\n\nfunction PieChart() {\n    const svgRef = useRef(null);\n\n    useEffect(() => {\n        async function fetchData() {\n            let response = await covidData.allStateCurrent()\n            let data = response.data\n            data = data.map((d) => {\n                return {\n                    \"name\": d.state,\n                    \"value\": d.positive\n                }\n\n            })\n\n\n            const pie = d3.pie()\n                .padAngle(0.005)\n                .sort(null)\n                .value(d => d.value)\n\n            const arcs = pie(data)\n            console.log(arcs)\n            \n            const width = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0)\n            const height = Math.min(width, 1600);\n\n            const color = d3.scaleOrdinal()\n                .domain(data.map(d => d.name))\n                .range(d3.quantize(t => d3.interpolateSpectral(t * 0.8 + 0.1), data.length).reverse())\n\n            const radius = Math.min(width, height) / 2;\n            const arc = d3.arc().innerRadius(radius * 0.67).outerRadius(radius - 1);\n\n\n            const svg = d3.select(svgRef.current)\n                .attr(\"viewBox\", [-width / 2, -height / 2, width, height])\n\n\n\n\n            svg.selectAll(\"path\")\n                .data(arcs)\n                .join(\"path\")\n                    .attr(\"fill\", d => color(d.data.name))\n                    .attr(\"d\", arc)\n                    .append(\"title\")\n                        .text(d => `${d.data.name}: ${d.data.value.toLocaleString()}`);\n\n            svg.append(\"g\")\n                .attr(\"font-family\", \"sans-serif\")\n                .attr(\"font-size\", 12)\n                .attr(\"text-anchor\", \"middle\")\n                .selectAll(\"text\")\n                .data(arcs)\n                .join(\"text\")\n                .attr(\"transform\", d => `translate(${arc.centroid(d)})`)\n                .call(text => text.append(\"tspan\")\n                    .attr(\"y\", \"-0.4em\")\n                    .attr(\"font-weight\", \"bold\")\n                    .text(d => d.data.name))\n                .call(text => text.filter(d => (d.endAngle - d.startAngle) > 0.25).append(\"tspan\")\n                    .attr(\"x\", 0)\n                    .attr(\"y\", \"0.7em\")\n                    .attr(\"fill-opacity\", 0.7)\n                    .text(d => d.data.value.toLocaleString()));\n\n        }\n\n        fetchData();\n\n    })\n\n\n\n    return (\n        <svg className=\"canvas\" ref={svgRef}></svg>\n    )\n}\n\nexport default PieChart;","import React, { useEffect, useRef, useState } from \"react\";\nimport covidData from \"../../utilities/API\";\nimport * as d3 from \"d3\";\nimport { DropDown} from \"../forms\";\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { parseDate } from \"../../utilities/function\"\nimport states from \"../../states.json\";\n\nconst LineChart = () => {\n    const [state, setState] = useState(\"al\")\n    const histoRef = useRef(null);\n    useEffect(() => {\n        const fetchData = async (state) => {\n            let data = (await covidData.singleState(state)).data\n            data = Object.assign(data.map((d) => {\n                return (\n                    d3.autoType({\n                        date: parseDate(d.date),\n                        value: d.positiveIncrease.toString()\n                    })\n                )\n            }), { y: \"Positive Increase\" })\n            return data\n        }\n        const sketch = async () => {\n            let data = await fetchData(state)\n            const height = 300;\n            const width = 3 * height\n            const margin = ({ top: 20, right: 30, bottom: 30, left: 40 });\n\n            const y = d3.scaleLinear()\n                .domain([0, d3.max(data, d => d.value)]).nice()\n                .range([height - margin.bottom, margin.top])\n\n            const yAxis = g => g\n                .attr(\"transform\", `translate(${margin.left},0)`)\n                .call(d3.axisLeft(y))\n                .call(g => g.select(\".domain\").remove())\n                .call(g => g.select(\".tick:last-of-type text\").clone()\n                    .attr(\"x\", 3)\n                    .attr(\"text-anchor\", \"start\")\n                    .attr(\"font-weight\", \"bold\")\n                    .text(data.y))\n\n            const x = d3.scaleUtc()\n                .domain(d3.extent(data, d => d.date))\n                .range([margin.left, width - margin.right])\n\n            const xAxis = g => g\n                .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n                .call(d3.axisBottom(x).ticks(width / 100).tickSizeOuter(0))\n\n\n            const line = d3.line()\n                .defined(d => !isNaN(d.value))\n                .x(d => x(d.date))\n                .y(d => y(d.value))\n\n            const svg = d3.select(histoRef.current)\n                .attr(\"viewBox\", [0, 0, width, height]);\n\n            //clear canvas when re-rendering\n            svg.selectAll(\"*\").remove();\n\n            svg.append(\"g\")\n                .call(xAxis);\n\n            svg.append(\"g\")\n                .call(yAxis);\n\n            svg.append(\"path\")\n                .datum(data)\n                .attr(\"fill\", \"none\")\n                .attr(\"stroke\", \"#563DD0\")\n                .attr(\"stroke-width\", 1.5)\n                .attr(\"stroke-linejoin\", \"round\")\n                .attr(\"stroke-linecap\", \"round\")\n                .attr(\"d\", line);\n        }\n        sketch()\n\n    },[state])\n\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        let choice = event.target.value\n        setState(choice)\n    }\n\n    return (\n\n        <div>\n            <DropDown\n                submit={handleSubmit}\n                value= {state}\n            >\n                {states.map((s) => {\n                    return (\n                        <MenuItem\n                            value={s.abbreviation}\n                        >{s.abbreviation.toUpperCase()}</MenuItem>\n                    )\n                })}\n            </DropDown>\n            <svg ref={histoRef}></svg>\n        </div>\n    )\n}\n\nexport default LineChart;","import React from \"react\";\nimport \"./style.scss\"\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Odometer from 'react-odometerjs';\n\nexport const DataTable = (props) => {\n    return (\n        <TableContainer component={Paper}>\n            <Table>\n                <TableHead>\n                    <TableRow>\n                        {props.headers.map((header, i) => {\n                            return (\n                                <TableCell\n                                    style={{\"font-weight\":\"bold\"}}\n                                >\n                                    {header}\n                                </TableCell>\n                            )\n                        })}\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {Object.keys(props.rows).map((r, i) => {\n                        let row = props.rows[r]\n                        return (\n                            <TableRow\n                                key={i}\n                            >\n                                <TableCell>\n                                    {r}\n                                </TableCell>\n                                <TableCell>\n                                    {row? row.positive : null}\n                                </TableCell>\n                                <TableCell>\n                                    {row? row.hospitalized : null}\n                                </TableCell>\n                                <TableCell>\n                                    {row? row.death : null}\n                                </TableCell>\n\n                            </TableRow>\n                        )\n                    })}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    )\n}\n\n\nexport const DataCell = (props) => {\n\n    const numberWithCommas = (x = 0) => {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    let current = numberWithCommas(props.data.current)\n    let increased = numberWithCommas(props.data.increased)\n\n    return (\n        <div className=\"data-cell\">\n            <h2>{props.title}</h2>\n            <p className=\"odometer current-number\">{current}</p>\n            <p className=\"increased-number\">{`+${increased}`}</p>\n        </div>\n    )\n};\n","import * as d3 from \"d3\";\n\n\nexport default function legend({\n    color,\n    title,\n    tickSize = 6,\n    width = 320,\n    height = 44 + tickSize,\n    marginTop = 18,\n    marginRight = 0,\n    marginBottom = 16 + tickSize,\n    marginLeft = 0,\n    ticks = width / 64,\n    tickFormat,\n    tickValues\n} = {}) {\n\n    function ramp(color, n = 256) {\n        const canvas = HTMLCanvasElement`<canvas width=${n} height=1>`;\n        const context = canvas.getContext(\"2d\");\n        for (let i = 0; i < n; ++i) {\n            context.fillStyle = color(i / (n - 1));\n            context.fillRect(i, 0, 1, 1);\n        }\n        return canvas;\n    }\n\n    const svg = d3.create(\"svg\")\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n        .attr(\"viewBox\", [0, 0, width, height])\n        .style(\"overflow\", \"visible\")\n        .style(\"display\", \"block\");\n\n    let tickAdjust = g => g.selectAll(\".tick line\").attr(\"y1\", marginTop + marginBottom - height);\n    let x;\n\n    // Continuous\n    if (color.interpolate) {\n        const n = Math.min(color.domain().length, color.range().length);\n\n        x = color.copy().rangeRound(d3.quantize(d3.interpolate(marginLeft, width - marginRight), n));\n\n        svg.append(\"image\")\n            .attr(\"x\", marginLeft)\n            .attr(\"y\", marginTop)\n            .attr(\"width\", width - marginLeft - marginRight)\n            .attr(\"height\", height - marginTop - marginBottom)\n            .attr(\"preserveAspectRatio\", \"none\")\n            .attr(\"xlink:href\", ramp(color.copy().domain(d3.quantize(d3.interpolate(0, 1), n))).toDataURL());\n    }\n\n    // Sequential\n    else if (color.interpolator) {\n        x = Object.assign(color.copy()\n            .interpolator(d3.interpolateRound(marginLeft, width - marginRight)),\n            { range() { return [marginLeft, width - marginRight]; } });\n\n        svg.append(\"image\")\n            .attr(\"x\", marginLeft)\n            .attr(\"y\", marginTop)\n            .attr(\"width\", width - marginLeft - marginRight)\n            .attr(\"height\", height - marginTop - marginBottom)\n            .attr(\"preserveAspectRatio\", \"none\")\n            .attr(\"xlink:href\", ramp(color.interpolator()).toDataURL());\n\n        // scaleSequentialQuantile doesn’t implement ticks or tickFormat.\n        if (!x.ticks) {\n            if (tickValues === undefined) {\n                const n = Math.round(ticks + 1);\n                tickValues = d3.range(n).map(i => d3.quantile(color.domain(), i / (n - 1)));\n            }\n            if (typeof tickFormat !== \"function\") {\n                tickFormat = d3.format(tickFormat === undefined ? \",f\" : tickFormat);\n            }\n        }\n    }\n\n    // Threshold\n    else if (color.invertExtent) {\n        let thresholds\n            = color.thresholds ? color.thresholds() // scaleQuantize\n                : color.quantiles ? color.quantiles() // scaleQuantile\n                    : color.domain(); // scaleThreshold\n        thresholds = thresholds.map(t=>t.toPrecision(3))\n        const thresholdFormat\n            = tickFormat === undefined ? d => d\n                : typeof tickFormat === \"string\" ? d3.format(tickFormat)\n                    : tickFormat;\n\n        x = d3.scaleLinear()\n            .domain([-1, color.range().length - 1])\n            .rangeRound([marginLeft, width - marginRight]);\n\n        svg.append(\"g\")\n            .selectAll(\"rect\")\n            .data(color.range())\n            .join(\"rect\")\n            .attr(\"x\", (d, i) => x(i - 1))\n            .attr(\"y\", marginTop)\n            .attr(\"width\", (d, i) => x(i) - x(i - 1))\n            .attr(\"height\", height - marginTop - marginBottom)\n            .attr(\"fill\", d => d);\n\n        tickValues = d3.range(thresholds.length);\n        tickFormat = i => thresholdFormat(thresholds[i], i);\n    }\n\n    // Ordinal\n    else {\n        x = d3.scaleBand()\n            .domain(color.domain())\n            .rangeRound([marginLeft, width - marginRight]);\n\n        svg.append(\"g\")\n            .selectAll(\"rect\")\n            .data(color.domain())\n            .join(\"rect\")\n            .attr(\"x\", x)\n            .attr(\"y\", marginTop)\n            .attr(\"width\", Math.max(0, x.bandwidth() - 1))\n            .attr(\"height\", height - marginTop - marginBottom)\n            .attr(\"fill\", color);\n\n        tickAdjust = () => { };\n    }\n\n    svg.append(\"g\")\n        .attr(\"transform\", `translate(0,${height - marginBottom})`)\n        .call(d3.axisBottom(x)\n            .ticks(ticks, typeof tickFormat === \"string\" ? tickFormat : undefined)\n            .tickFormat(typeof tickFormat === \"function\" ? tickFormat : undefined)\n            .tickSize(tickSize)\n            .tickValues(tickValues))\n        .call(tickAdjust)\n        .call(g => g.select(\".domain\").remove())\n        .call(g => g.append(\"text\")\n            .attr(\"x\", marginLeft)\n            .attr(\"y\", marginTop + marginBottom - height - 6)\n            .attr(\"fill\", \"currentColor\")\n            .attr(\"text-anchor\", \"start\")\n            .attr(\"font-weight\", \"bold\")\n            .text(title));\n\n    return svg.node();\n}","import React, { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport us from \"../../states-albers-10m.json\"\nimport covidData from \"../../utilities/API\"\nimport legend from \"../legend\"\nimport { DropDown } from \"../forms\"\nimport MenuItem from '@material-ui/core/MenuItem';\nimport stateConversion from \"../../state-conversion.json\"\nimport \"./style.scss\"\n\nconst possibleChoice = [\"Positive\", \"Hospitalized\", \"Death\"]\n\nconst Choropleth = (props) => {\n    const choroRef = useRef(null);\n    const [choice, setChoice] = useState(\"Positive\")\n\n    const setViewingState = props.handleClick\n\n    const fetchData = async () => {\n        const response = (await covidData.allStateCurrent()).data\n        const data = new Map();\n        let temp = []\n        response.forEach((r) => {\n            const state = stateConversion[r.state]\n            if (!state) return\n            switch (choice) {\n                case \"Hospitalized\":\n                    const hospitalized = Math.ceil(r.hospitalizedCurrently / 1000)\n                    data.set(state, hospitalized);\n                    temp.push([state, hospitalized])\n                    break\n                case \"Death\":\n                    const death = Math.ceil(r.death / 1000)\n                    data.set(state, death);\n                    temp.push([state, death])\n                    break\n                default:\n                    const positive = Math.ceil(r.positive / 1000)\n                    data.set(state, positive);\n                    temp.push([state, positive])\n                    break\n            }\n\n        })\n        return data\n    }\n\n\n    useEffect(() => {\n\n        async function sketch() {\n            const data = await fetchData()\n            const format = d => `${d}`\n            const path = d3.geoPath();\n            let color;\n            if (choice === \"Positive\") {\n                color = d3.scaleQuantize([0, 1000], d3.schemePurples[9])\n            }\n            else if (choice === \"Hospitalized\") {\n                color = d3.scaleQuantize([0, 5], d3.schemePurples[9])\n            }\n            else {\n                color = d3.scaleQuantize([0, 20], d3.schemePurples[9])\n\n            }\n\n\n            const svg = d3.select(choroRef.current)\n                .attr(\"viewBox\", [0, 0, 975, 610]);\n\n            svg.selectAll(\"*\").remove();\n\n            svg.append(\"g\")\n                .attr(\"transform\", \"translate(610,20)\")\n                .append(() => legend({ color, title: data.title, width: 260 }));\n\n            svg.append(\"g\")\n                .selectAll(\"path\")\n                .data(topojson.feature(us, us.objects.states).features)\n                .join(\"path\")\n                .attr(\"fill\", d => color(data.get(d.properties.name)))\n                .attr(\"d\", path)\n                .on(\"click\", function (data) {\n                    setViewingState(data.properties.name)\n                })\n                .append(\"title\")\n                .text(d => {\n                    let number = format(data.get(d.properties.name))\n                    return `${d.properties.name}\n${number > 1000 ? number / 1000 + \"M\" : number + \"K\"}`\n                })\n\n\n            //borderlines\n            svg.append(\"path\")\n                .datum(topojson.mesh(us, us.objects.states, (a, b) => a !== b))\n                .attr(\"fill\", \"none\")\n                .attr(\"stroke\", \"indigo\")\n                .attr(\"stroke-linejoin\", \"round\")\n                .attr(\"d\", path);\n\n        }\n        sketch()\n    }, [choice])\n    \n    const handleSubmit = (event) => {\n        setChoice(event.target.value)\n    }\n\n    return (\n        <>\n            <DropDown\n                submit={handleSubmit}\n                value={choice}\n            >\n                {possibleChoice.map((c) => {\n                    return (\n                        <MenuItem\n                            value={c}\n                            key={c}\n                        >\n                            {c.toUpperCase()}\n                        </MenuItem>\n                    )\n                })}\n            </DropDown>\n\n            <svg className=\"choro\" ref={choroRef}></svg>\n        </>\n    )\n};\n\nexport default Choropleth;","import React, { useEffect, useState } from \"react\";\nimport { DataCell, DataTable } from \"../dataDisplay\"\nimport \"./style.scss\";\nimport covidData from \"../../utilities/API\"\nimport Choropleth from \"../choropleth\"\nimport stateConversion from \"../../state-conversion.json\"\n\nconst CurrentData = () => {\n    const [totalCase, setTotalCase] = useState({});\n    const [totalDeath, setTotalDeath] = useState({});\n    const [viewingState, setViewingState] = useState(\"California\")\n    const [statesData, setStatesData] = useState([])\n    useEffect(() => {\n        const fetchData = (async () => {\n            const usData = (await covidData.usCurrent()).data[0]\n            setTotalDeath(\n                {\n                    current: usData.death,\n                    increased: usData.deathIncrease\n                }\n            )\n            setTotalCase(\n                {\n                    current: usData.positive,\n                    increased: usData.positiveIncrease\n                }\n            )\n            const stateData = (await covidData.allStateCurrent()).data\n            let allStateData = {}\n            stateData.forEach((s) => {\n                if (s.state !== \"AS\" && s.state !== \"GU\" && s.state !== \"MP\" && s.state !== \"PR\" && s.state !== \"VI\" && s.state !== \"DC\") {\n                    const state = stateConversion[s.state]\n\n                    allStateData[state] =\n                    {\n                        positive: s.positive,\n                        death: s.death,\n                        hospitalized: s.hospitalizedCurrently\n                    }\n                }\n            })\n            setStatesData(allStateData)\n        })();\n    }, [])\n\n\n    return (\n        <>\n            <div className=\"stat-display\">\n                <DataCell\n                    title=\"Total Cases\"\n                    data={totalCase}\n                />\n                <DataCell\n                    title=\"Total Deaths\"\n                    data={totalDeath}\n                />\n            </div>\n            <DataTable\n                headers={[\"State\", \"Positive\", \"Hospitalized\", \"Death\"]}\n                rows={{[viewingState]:statesData[viewingState]}}\n            > \n            </DataTable>\n            <Choropleth\n                handleClick={setViewingState}\n            ></Choropleth>\n\n            <DataTable\n                headers={[\"State\", \"Positive\", \"Hospitalized\", \"Death\"]}\n                rows={statesData}\n            >\n            </DataTable>\n\n        </>\n    )\n}\n\nexport default CurrentData;","import React, { useEffect, useState, useRef } from 'react';\nimport './App.scss';\nimport { NavBar, NavItem } from \"./component/navbar\"\nimport RacingBar from \"./component/racingBar\";\nimport PieChart from \"./component/pieChart\";\nimport LineChart from \"./component/lineChart\"\nimport CurrentData from \"./component/currentData/index\"\nimport AppBar from '@material-ui/core/AppBar';\n\nfunction App() {\n  const [activeIndex, setActiveIndex] = useState(\"0\");\n  const option = [\"Current Data\", \"Trends by state\", \"Competition between states\"]\n  const handleClick = (index) => {\n    console.log(index)\n    setActiveIndex(index)\n  }\n\n  const conditionalRender = (index) => {\n    switch (index) {\n      case (0):\n        return (\n          <CurrentData></CurrentData>\n        )\n      case (1):\n        return (<LineChart></LineChart>)\n      case (2):\n        return (<RacingBar></RacingBar>)\n      default:\n        return (<CurrentData></CurrentData>)\n    }\n\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h1>Covid-19 Data Visualizer</h1>\n        <h3>An intuitive way to see Coronavirus Disease 2019 data</h3>\n      </div>\n\n      <NavBar\n        options={option}\n        click={handleClick}\n      />\n      <div className=\"main\">\n\n        {conditionalRender(activeIndex)}\n      </div>\n      <AppBar\n        position=\"relative\"\n        color=\"transparent\"\n        style={{ \"background-color\": \"#219653\" }}\n      >\n        <p className=\"footer\">Data provided by <a href=\"https://covidtracking.com/\">The Covid Tracking Project</a></p>\n      </AppBar>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}